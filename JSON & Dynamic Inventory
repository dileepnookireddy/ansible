✅ What is Dynamic Inventory in Ansible?

Static Inventory = Hardcoded list of hosts in hosts or inventory file.

Dynamic Inventory = Inventory generated dynamically from a source like:
Cloud Providers (AWS, Azure, GCP)
Kubernetes
Databases, CMDB
Custom scripts or APIs
🔹 Useful when your infrastructure is dynamic, like in Cloud/DevOps.

✅ How Dynamic Inventory Works
1. Ansible calls a script, plugin, or API to get inventory data on-demand.
2. Returns JSON format with host/group info.
3. Ansible uses this data in playbooks.

✅ Example 1: AWS EC2 Dynamic Inventory (Using Plugin)
🔹 Step 1: Enable EC2 Plugin
Create aws_ec2.yml inventory file:
plugin: aws_ec2
regions:
  - us-east-1
filters:
  instance-state-name: running
keyed_groups:
  - key: tags.Name
hostnames:
  - private-ip-address
🔹 Make sure you have:
pip install boto3 botocore
AWS credentials from environment variables or ~/.aws/credentials.

🔹 Step 2: Run with Dynamic Inventory
ansible-inventory -i aws_ec2.yml --graph
Expected output:
@all:
  |--@web-servers:
  |    |--10.0.1.12
  |    |--10.0.1.13

✅ Example 2: Dynamic Inventory with Custom Python Script

Write a custom script custom_inventory.py:

#!/usr/bin/env python3
import json

inventory = {
    "all": {
        "hosts": ["server1", "server2"],
        "vars": {
            "ansible_user": "ubuntu"
        }
    }
}

print(json.dumps(inventory))

Make it executable:
chmod +x custom_inventory.py

Run it:
ansible-inventory -i ./custom_inventory.py --list


✅ Example 3: Kubernetes Dynamic Inventory

Using the community.kubernetes plugin:

plugin: kubernetes.core.k8s
api_key: ~/.kube/config
kind: Pod
namespace: default

Then run:

ansible-inventory -i k8s_inventory.yml --graph

✅ Benefits of Dynamic Inventory
   1. No need to manually update hosts.
   2. Auto-sync with cloud infra.
   3. Great for auto-scaling groups, Kubernetes clusters.
   4. Ideal for CI/CD pipelines.

✅ Summary Flow
   1.  Define dynamic inventory source (script/plugin/cloud API).
   2.  Run ansible-inventory to see dynamic hosts.
   3.  Use it in playbooks with -i dynamic_inventory_source.

---------------------------------------------------------------------
JSON (JavaScript Object Notation) and its use in Ansible Dynamic Inventory (and general DevOps/Automation).

✅ What is JSON?
  1. JSON is a lightweight data interchange format.
  2. It is easy for humans to read/write and easy for machines to parse.
  3. Common in APIs, configuration files, automation tools.

✅ Basic JSON Syntax

{
  "key": "value",
  "list": [1, 2, 3],
  "nested": {
    "inner_key": "inner_value"
  }
}


JSON Rules:
------------
1. Data is in key-value pairs.
2. Curly braces {} for objects.
3. Square brackets [] for arrays/lists.
4. Keys & string values in double quotes.

✅ Example: JSON Dynamic Inventory for Ansible

Here’s an example of JSON used for Dynamic Inventory:

{
  "web": {
    "hosts": ["192.168.1.10", "192.168.1.11"],
    "vars": {
      "ansible_user": "ubuntu"
    }
  },
  "db": {
    "hosts": ["192.168.1.20"],
    "vars": {
      "ansible_user": "postgres"
    }
  },
  "_meta": {
    "hostvars": {
      "192.168.1.10": {
        "env": "dev"
      },
      "192.168.1.11": {
        "env": "dev"
      },
      "192.168.1.20": {
        "env": "prod"
      }
    }
  }
}

🔹 Breakdown:
   Groups: web, db
   Hosts in Groups: IP addresses
   Group Vars: ansible_user
   Host Vars: under _meta -> hostvars

✅ Test with Ansible
ansible-inventory -i inventory.json --list

✅ Real Use Case: Cloud Dynamic Inventory Returns JSON
For example:
1. AWS EC2 inventory plugin returns JSON.
2. Kubernetes API returns JSON.
3. You can also write your own scripts that output JSON for Ansible.

✅ Convert YAML ↔ JSON
Since Ansible defaults to YAML, sometimes you want to convert:

# YAML to JSON
yq -o=json input.yml > output.json

# JSON to YAML
yq -o=yaml input.json > output.yml

✅ Summary
  1. JSON is everywhere in automation & dynamic inventories.
  2. Ansible dynamic inventories rely on JSON structure.
  3. Simple scripts or cloud plugins can generate JSON inventories.

----------------------------------------------------

Let’s build a Custom Dynamic Inventory Script in Python that outputs JSON for Ansible.

✅ Goal
    We’ll create a script that:
     1. Dynamically builds inventory data.
     2. Outputs valid JSON.
     3. Can be used with Ansible's -i option.

✅ Step-by-Step Example
🔹 1. Create Python Script: custom_inventory.py

#!/usr/bin/env python3
import json
import sys

# Example dynamic data (can be from a DB, API, etc.)
inventory = {
    "webservers": {
        "hosts": ["192.168.56.10", "192.168.56.11"],
        "vars": {
            "ansible_user": "ubuntu"
        }
    },
    "dbservers": {
        "hosts": ["192.168.56.20"],
        "vars": {
            "ansible_user": "postgres"
        }
    },
    "_meta": {
        "hostvars": {
            "192.168.56.10": {"env": "dev"},
            "192.168.56.11": {"env": "stage"},
            "192.168.56.20": {"env": "prod"}
        }
    }
}

# Check for --list argument (Ansible requires this for dynamic inventory)
if len(sys.argv) == 2 and sys.argv[1] == '--list':
    print(json.dumps(inventory, indent=2))
else:
    print(json.dumps({}))

🔹 2. Make It Executable
chmod +x custom_inventory.py

🔹 3. Test It
./custom_inventory.py --list

Expected output:

{
  "webservers": {
    "hosts": [
      "192.168.56.10",
      "192.168.56.11"
    ],
    "vars": {
      "ansible_user": "ubuntu"
    }
  },
  "dbservers": {
    "hosts": [
      "192.168.56.20"
    ],
    "vars": {
      "ansible_user": "postgres"
    }
  },
  "_meta": {
    "hostvars": {
      "192.168.56.10": {
        "env": "dev"
      },
      "192.168.56.11": {
        "env": "stage"
      },
      "192.168.56.20": {
        "env": "prod"
      }
    }
  }
}

🔹 4. Use With Ansible
ansible-inventory -i ./custom_inventory.py --graph

Example output:
@all:
  |--@dbservers:
  |  |--192.168.56.20
  |--@webservers:
  |  |--192.168.56.10
  |  |--192.168.56.11

✅ Explanation
    1. Script outputs JSON in Ansible inventory format.
    2. Uses --list argument (required by Ansible).
    3. Can be extended to fetch data from APIs, databases, cloud services, etc.

✅ Real-World Usage
    1. Dynamic Inventory for Docker containers, Kubernetes Pods, Cloud VMs.
    2. Perfect for ephemeral infrastructure in DevOps.

---------------------------------------------------------

Custom Dynamic Inventory Script to dynamically discover live hosts by pinging IPs or reading from a dynamic source.

✅ Goal: Dynamic Live Inventory Example
    We'll build a Python script that:
      1. Pings a list of IPs.
      2. Includes only reachable (alive) hosts in the inventory.
      3. Outputs valid JSON for Ansible.

✅ Step-by-Step: Live Discovery Example

🔹 1. Python Script: live_inventory.py

#!/usr/bin/env python3
import json
import subprocess
import sys

# List of IPs to check (can come from API, DB, etc.)
ip_list = ["192.168.56.10", "192.168.56.11", "192.168.56.20"]

# Function to ping IP and check if it's alive
def is_host_alive(ip):
    try:
        # Ping with 1 packet, suppress output
        subprocess.check_output(["ping", "-c", "1", "-W", "1", ip], stderr=subprocess.DEVNULL)
        return True
    except subprocess.CalledProcessError:
        return False

# Build dynamic inventory
inventory = {
    "all": {
        "hosts": [],
        "vars": {
            "ansible_user": "ubuntu"
        }
    },
    "_meta": {
        "hostvars": {}
    }
}

# Ping each IP, add alive hosts to inventory
for ip in ip_list:
    if is_host_alive(ip):
        inventory["all"]["hosts"].append(ip)
        inventory["_meta"]["hostvars"][ip] = {
            "env": "dev"  # Example variable, could be dynamic
        }

# Output for Ansible
if len(sys.argv) == 2 and sys.argv[1] == '--list':
    print(json.dumps(inventory, indent=2))
else:
    print(json.dumps({}))

🔹 2. Make Script Executable
chmod +x live_inventory.py

🔹 3. Test the Script
./live_inventory.py --list

✅ Expected Output (Example with reachable hosts)

{
  "all": {
    "hosts": [
      "192.168.56.10",
      "192.168.56.11"
    ],
    "vars": {
      "ansible_user": "ubuntu"
    }
  },
  "_meta": {
    "hostvars": {
      "192.168.56.10": {
        "env": "dev"
      },
      "192.168.56.11": {
        "env": "dev"
      }
    }
  }
}
Unreachable hosts (e.g., 192.168.56.20) won't be listed.

🔹 4. Use with Ansible Inventory
ansible-inventory -i ./live_inventory.py --graph

✅ Summary
    1. Dynamically checks which hosts are up.
    2. Builds live inventory for Ansible.
    3. Can extend to use APIs, Cloud discovery, etc.
    4. Fully compatible with Ansible Dynamic Inventory.

---------------------------------------------------------------------
Now let's build a Dynamic Inventory Script for AWS EC2 Instances using boto3 (AWS SDK for Python).

✅ Goal: Live EC2 Dynamic Inventory
    1. Dynamically discover EC2 instances.
    2. Group them by tags (e.g., Environment: dev/stage/prod).
    3. Output valid JSON for Ansible.
    4. Ready for DevOps automation.

✅ Pre-requisites

Install AWS SDK for Python:
pip install boto3

Configure AWS credentials:
aws configure  # Provide Access Key, Secret Key, Region, Output format (json)
Or use an IAM role if on EC2.

✅ Step-by-Step: EC2 Dynamic Inventory Script

🔹 1. Create Script: aws_ec2_inventory.py

#!/usr/bin/env python3
import boto3
import json
import sys

# Initialize EC2 client
ec2 = boto3.client('ec2')

# Describe running EC2 instances
response = ec2.describe_instances(
    Filters=[{'Name': 'instance-state-name', 'Values': ['running']}]
)

# Prepare inventory structure
inventory = {
    'all': {
        'hosts': [],
        'vars': {
            'ansible_user': 'ec2-user'  # Default user, change as needed
        }
    },
    '_meta': {
        'hostvars': {}
    }
}

# Populate inventory with instance data
for reservation in response['Reservations']:
    for instance in reservation['Instances']:
        private_ip = instance.get('PrivateIpAddress')
        if private_ip:
            inventory['all']['hosts'].append(private_ip)

            # Extract tags (convert list of dicts to key-value)
            tags = {tag['Key']: tag['Value'] for tag in instance.get('Tags', [])}

            # Add host variables (custom)
            inventory['_meta']['hostvars'][private_ip] = {
                'instance_id': instance['InstanceId'],
                'instance_type': instance['InstanceType'],
                'env': tags.get('Environment', 'unknown')
            }

# Output for Ansible
if len(sys.argv) == 2 and sys.argv[1] == '--list':
    print(json.dumps(inventory, indent=2))
else:
    print(json.dumps({}))

✅ 2. Make Script Executable
chmod +x aws_ec2_inventory.py

✅ 3. Run & Test
./aws_ec2_inventory.py --list

✅ Expected Output (Example)

{
  "all": {
    "hosts": [
      "10.0.1.12",
      "10.0.1.13"
    ],
    "vars": {
      "ansible_user": "ec2-user"
    }
  },
  "_meta": {
    "hostvars": {
      "10.0.1.12": {
        "instance_id": "i-0123456789abcdef0",
        "instance_type": "t2.micro",
        "env": "dev"
      },
      "10.0.1.13": {
        "instance_id": "i-0abcdef1234567890",
        "instance_type": "t2.medium",
        "env": "prod"
      }
    }
  }
}

✅ 4. Use with Ansible
ansible-inventory -i ./aws_ec2_inventory.py --graph

✅ Bonus:
    1. You can group by tags (like Environment) for dynamic grouping.
    2. You can filter by Security Groups, VPCs, Subnets, etc.
    3. Perfect for auto-scaling environments.

✅ Summary
    1. Live EC2 discovery using boto3.
    2. Fully dynamic Ansible Inventory.
    3. Useful in GitOps, CI/CD, auto-scaling scenarios.
    4. No manual inventory files needed.

-------------------------------------------------------------

Now let’s do it the official & production-ready way using the Ansible EC2 Dynamic Inventory Plugin (no custom scripts, just YAML config).

✅ EC2 Dynamic Inventory using Ansible Plugin (Best Practice)

✅ Step 1: Prerequisites

Make sure these are installed:

pip install boto3 botocore
ansible --version  # Should be >= 2.9

✅ Ensure AWS credentials are configured:

aws configure
Or via environment variables/IAM role.

✅ Step 2: Create EC2 Inventory File (YAML Plugin)

Create a file: aws_ec2.yml

plugin: aws_ec2
regions:
  - us-east-1                # <-- your region
filters:
  instance-state-name: running
hostnames:
  - private-ip-address        # or 'public-ip-address' if needed
keyed_groups:
  - key: tags.Environment     # Grouping by Environment tag (dev/stage/prod)
  - key: instance_type        # Optional: group by instance type
compose:
  ansible_host: private_ip_address

✅ Step 3: Test the Inventory
Run this command to see dynamic inventory:
ansible-inventory -i aws_ec2.yml --list

✅ To visualize in tree form:
ansible-inventory -i aws_ec2.yml --graph
🔹 Example Output:
@all:
  |--@Environment_dev:
  |  |--10.0.1.12
  |--@Environment_prod:
  |  |--10.0.1.13

✅ Step 4: Use in Playbook
Run Ansible playbooks like this:
ansible-playbook -i aws_ec2.yml site.yml
Or ad-hoc command:
ansible -i aws_ec2.yml all -m ping

✅ Benefits of EC2 Plugin
✅ No custom scripts
✅ Official, well-maintained by Ansible
✅ Supports advanced filters (VPC, tags, security groups)
✅ Auto-syncs with AWS
✅ Supports public & private IPs
✅ Groups by tags, types, AZ, etc.

✅ Bonus (Advanced Filters Example)
You can filter more specifically:

filters:
  tag:Project: myapp
  instance-state-name: running

✅ Summary

Method       --      Best for
Custom Script -->   Very custom logic, complex APIs
EC2 Plugin	  -->   99% use cases for AWS, production setups

-----------------------------------------------------------------

 Let’s create a GitHub-ready Ansible Project Folder Structure with Dynamic EC2 Inventory, Best Practices, and CI/CD ready format.


✅ Ansible Project Folder Structure (Best Practice)

practicedevops-ansible/
├── ansible.cfg
├── inventory/
│   └── aws_ec2.yml              # Dynamic Inventory config (EC2 plugin)
├── group_vars/
│   └── all.yml                  # Global variables
├── host_vars/
│   └── 10.0.1.12.yml            # Host-specific variables (optional)
├── playbooks/
│   └── site.yml                 # Main playbook
│   └── webservers.yml           # Role-specific playbook
├── roles/
│   └── webserver/
│       ├── tasks/
│       │   └── main.yml         # Tasks for webserver
│       ├── handlers/
│       │   └── main.yml         # Handlers for webserver
│       ├── templates/
│       │   └── nginx.conf.j2    # Jinja2 templates
│       └── files/
│           └── index.html       # Static files
├── requirements.yml             # Galaxy roles/collections
├── ci-cd/
│   └── ansible-lint.yml         # Linting config for CI/CD
│   └── github-actions.yml       # GitHub Actions workflow file
└── README.md                    # Documentation

✅ Key Files Explained
🔹 ansible.cfg

[defaults]
inventory = ./inventory/aws_ec2.yml
remote_user = ec2-user
host_key_checking = False
retry_files_enabled = False

🔹 inventory/aws_ec2.yml

plugin: aws_ec2
regions:
  - us-east-1
filters:
  instance-state-name: running
hostnames:
  - private-ip-address
keyed_groups:
  - key: tags.Environment
compose:
  ansible_host: private_ip_address

🔹 group_vars/all.yml
ntp_server: time.amazon.com

🔹 playbooks/site.yml

- name: Apply common configurations
  hosts: all
  roles:
    - webserver

🔹 roles/webserver/tasks/main.yml

- name: Install NGINX
  yum:
    name: nginx
    state: present

- name: Deploy index.html
  copy:
    src: index.html
    dest: /usr/share/nginx/html/index.html

- name: Start NGINX
  service:
    name: nginx
    state: started
    enabled: true

✅ CI/CD with GitHub Actions Example
🔹 .github/workflows/ansible-ci.yml

name: Ansible CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Ansible & Lint
        run: |
          pip install ansible ansible-lint boto3
      - name: Lint Playbooks
        run: ansible-lint playbooks/

✅ How it Works
    1. Inventory auto-discovers EC2 instances.
    2. Playbooks apply roles dynamically.
    3. CI/CD (GitHub Actions) lints playbooks on every PR.
    4. Clean, modular structure for team collaboration.

✅ Optional Enhancements
✅ Add terraform/ folder for Infra provisioning
✅ Add molecule/ for role testing
✅ Add Vault for encrypted secrets

-------------------------------------------------------------------
get started with Ansible's dynamic inventory for AWS EC2, here's a GitHub repository that demonstrates this setup:

📁 shamimice03/ansible-aws-ec2-dynamic-inventory
This repository provides a practical implementation of Ansible's dynamic inventory using the aws_ec2 plugin. It includes:

Dynamic Inventory Configuration: An aws_ec2.yaml file configured to fetch EC2 instances dynamically.

Playbooks: Sample playbooks like ping_test_playbook.yaml to test connectivity and erase_ssh_key.yaml for managing SSH keys.
GitHub

Group Variables: A group_vars directory to define variables applicable to groups of hosts.

Terraform Integration: An infra-using-terraform directory showcasing how to provision infrastructure using Terraform, which can be integrated with Ansible for configuration management.
GitHub

This setup is beneficial for environments where EC2 instances are frequently added or removed, ensuring that Ansible always has an up-to-date list of hosts.

For a more detailed guide on setting up Ansible's dynamic inventory with AWS EC2, you can refer to the official Ansible documentation:

Ansible AWS EC2 Dynamic Inventory Plugin Documentation

This documentation provides comprehensive information on configuring the plugin, including filtering instances, grouping, and setting host variables.


-----------------------------------END----------------------------------
