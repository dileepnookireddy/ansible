 Ansible playbook that copies SSH keys to 100+ servers using one password prompt?
---------------------------------------------------------------------------------

Here’s a ready-to-run Ansible playbook that will:

✅ Prompt you once for the SSH password.
✅ Copy your SSH public key to multiple servers.
✅ Works even if you have 100+ servers.

✅ Ansible Playbook: copy_ssh_key.yml
---
- name: Distribute SSH public key to multiple servers
  hosts: all
  gather_facts: no

  vars_prompt:
    - name: ansible_password
      prompt: "Enter SSH password for remote servers"
      private: yes

  tasks:
    - name: Ensure ~/.ssh directory exists on remote
      file:
        path: ~/.ssh
        state: directory
        mode: '0700'

    - name: Install SSH public key to authorized_keys
      ansible.posix.authorized_key:
        user: "{{ ansible_user | default('root') }}"
        state: present
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"

✅ Inventory Example (hosts file):
[all]
192.168.1.100
192.168.1.101
192.168.1.102
server1.domain.com
server2.domain.com

✅ Run the Playbook:
ansible-playbook -i hosts copy_ssh_key.yml --ask-pass
--ask-pass is required to supply the SSH password for initial connection.

You’ll enter the password once (Ansible will reuse it per host).

✅ Optional: Speed It Up
For 100+ servers, consider:

ansible-playbook -i hosts copy_ssh_key.yml --ask-pass -f 10     #### -f 10 runs up to 10 parallel forks (adjust as needed). ###

✅ After This:
You’ll have passwordless SSH login using your key.
Ansible will no longer need --ask-pass for those hosts.

------------------------------------------------------------
Here's a complete Ansible Bootstrap Workflow to get new servers fully ready for automation after SSH keys are in place.

✅ Step 1: Copy SSH Key to Servers (You already did this)
Done using the previous playbook:

ansible-playbook -i hosts copy_ssh_key.yml --ask-pass

After this, you have passwordless SSH login.

✅ Step 2: Test Connection (Ping all Servers)
Verify Ansible can reach servers via SSH key:

ansible -i hosts all -m ping

Expected output:
192.168.1.100 | SUCCESS => {"ping": "pong"}
192.168.1.101 | SUCCESS => {"ping": "pong"}

✅ Step 3: Gather Facts (Collect system info)
Run a quick playbook to gather facts:

# gather_facts.yml
- name: Gather facts for all servers
  hosts: all
  gather_facts: yes

  tasks:
    - name: Print OS info
      debug:
        msg: "Host {{ inventory_hostname }} is running {{ ansible_distribution }} {{ ansible_distribution_version }}"
Run it:

ansible-playbook -i hosts gather_facts.yml

✅ Step 4: Service Management Example (Check & Restart Services)
Example to check status & restart a service (e.g., nginx, sshd):

# manage_services.yml
- name: Manage services on all servers
  hosts: all
  gather_facts: yes

  tasks:
    - name: Check if nginx is running
      service_facts:

    - name: Display nginx status
      debug:
        msg: >
          Nginx is {{ services['nginx.service'].state if 'nginx.service' in services else 'not installed' }}

    - name: Restart nginx service (if installed)
      service:
        name: nginx
        state: restarted
      when: "'nginx.service' in services"

Run it:
ansible-playbook -i hosts manage_services.yml

✅ Step 5: Save Server Info to Files
You can extend this to save outputs like uptime, df -h, etc., into local files:

# gather_reports.yml
- name: Collect uptime and disk usage reports
  hosts: all
  gather_facts: no

  tasks:
    - name: Get uptime
      shell: uptime
      register: uptime_out

    - name: Get disk usage
      shell: df -h
      register: disk_out

    - name: Save report locally
      copy:
        dest: "/tmp/report_{{ inventory_hostname }}.txt"
        content: |
          Host: {{ inventory_hostname }}
          -------------------------
          Uptime:
          {{ uptime_out.stdout }}

          Disk Usage:
          {{ disk_out.stdout }}

    - name: Fetch reports to control node
      fetch:
        src: "/tmp/report_{{ inventory_hostname }}.txt"
        dest: "./reports/"
        flat: yes
Run it:

ansible-playbook -i hosts gather_reports.yml

✅ Final Structure Example

ansible_test/
├── hosts
├── copy_ssh_key.yml
├── gather_facts.yml
├── manage_services.yml
├── gather_reports.yml
├── reports/
│   ├── report_192.168.1.100.txt
│   └── report_192.168.1.101.txt

✅ TL;DR Bootstrap Workflow:
----------------------------
Task                	Command
Copy SSH key	        ansible-playbook -i hosts copy_ssh_key.yml --ask-pass
Test ping	           ansible -i hosts all -m ping
Gather facts	        ansible-playbook -i hosts gather_facts.yml
Manage services	     ansible-playbook -i hosts manage_services.yml
Collect reports	     ansible-playbook -i hosts gather_reports.yml



