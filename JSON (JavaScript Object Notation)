JSON (JavaScript Object Notation) and its use in Ansible Dynamic Inventory (and general DevOps/Automation).

âœ… What is JSON?
  1. JSON is a lightweight data interchange format.
  2. It is easy for humans to read/write and easy for machines to parse.
  3. Common in APIs, configuration files, automation tools.

âœ… Basic JSON Syntax

{
  "key": "value",
  "list": [1, 2, 3],
  "nested": {
    "inner_key": "inner_value"
  }
}


JSON Rules:
------------
1. Data is in key-value pairs.
2. Curly braces {} for objects.
3. Square brackets [] for arrays/lists.
4. Keys & string values in double quotes.

âœ… Example: JSON Dynamic Inventory for Ansible

Hereâ€™s an example of JSON used for Dynamic Inventory:

{
  "web": {
    "hosts": ["192.168.1.10", "192.168.1.11"],
    "vars": {
      "ansible_user": "ubuntu"
    }
  },
  "db": {
    "hosts": ["192.168.1.20"],
    "vars": {
      "ansible_user": "postgres"
    }
  },
  "_meta": {
    "hostvars": {
      "192.168.1.10": {
        "env": "dev"
      },
      "192.168.1.11": {
        "env": "dev"
      },
      "192.168.1.20": {
        "env": "prod"
      }
    }
  }
}

ðŸ”¹ Breakdown:
   Groups: web, db
   Hosts in Groups: IP addresses
   Group Vars: ansible_user
   Host Vars: under _meta -> hostvars

âœ… Test with Ansible
ansible-inventory -i inventory.json --list

âœ… Real Use Case: Cloud Dynamic Inventory Returns JSON
For example:
1. AWS EC2 inventory plugin returns JSON.
2. Kubernetes API returns JSON.
3. You can also write your own scripts that output JSON for Ansible.

âœ… Convert YAML â†” JSON
Since Ansible defaults to YAML, sometimes you want to convert:

# YAML to JSON
yq -o=json input.yml > output.json

# JSON to YAML
yq -o=yaml input.json > output.yml

âœ… Summary
  1. JSON is everywhere in automation & dynamic inventories.
  2. Ansible dynamic inventories rely on JSON structure.
  3. Simple scripts or cloud plugins can generate JSON inventories.

----------------------------------------------------

Letâ€™s build a Custom Dynamic Inventory Script in Python that outputs JSON for Ansible.

âœ… Goal
    Weâ€™ll create a script that:
     1. Dynamically builds inventory data.
     2. Outputs valid JSON.
     3. Can be used with Ansible's -i option.

âœ… Step-by-Step Example
ðŸ”¹ 1. Create Python Script: custom_inventory.py

#!/usr/bin/env python3
import json
import sys

# Example dynamic data (can be from a DB, API, etc.)
inventory = {
    "webservers": {
        "hosts": ["192.168.56.10", "192.168.56.11"],
        "vars": {
            "ansible_user": "ubuntu"
        }
    },
    "dbservers": {
        "hosts": ["192.168.56.20"],
        "vars": {
            "ansible_user": "postgres"
        }
    },
    "_meta": {
        "hostvars": {
            "192.168.56.10": {"env": "dev"},
            "192.168.56.11": {"env": "stage"},
            "192.168.56.20": {"env": "prod"}
        }
    }
}

# Check for --list argument (Ansible requires this for dynamic inventory)
if len(sys.argv) == 2 and sys.argv[1] == '--list':
    print(json.dumps(inventory, indent=2))
else:
    print(json.dumps({}))

ðŸ”¹ 2. Make It Executable
chmod +x custom_inventory.py

ðŸ”¹ 3. Test It
./custom_inventory.py --list

Expected output:

{
  "webservers": {
    "hosts": [
      "192.168.56.10",
      "192.168.56.11"
    ],
    "vars": {
      "ansible_user": "ubuntu"
    }
  },
  "dbservers": {
    "hosts": [
      "192.168.56.20"
    ],
    "vars": {
      "ansible_user": "postgres"
    }
  },
  "_meta": {
    "hostvars": {
      "192.168.56.10": {
        "env": "dev"
      },
      "192.168.56.11": {
        "env": "stage"
      },
      "192.168.56.20": {
        "env": "prod"
      }
    }
  }
}

ðŸ”¹ 4. Use With Ansible
ansible-inventory -i ./custom_inventory.py --graph

Example output:
@all:
  |--@dbservers:
  |  |--192.168.56.20
  |--@webservers:
  |  |--192.168.56.10
  |  |--192.168.56.11

âœ… Explanation
    1. Script outputs JSON in Ansible inventory format.
    2. Uses --list argument (required by Ansible).
    3. Can be extended to fetch data from APIs, databases, cloud services, etc.

âœ… Real-World Usage
    1. Dynamic Inventory for Docker containers, Kubernetes Pods, Cloud VMs.
    2. Perfect for ephemeral infrastructure in DevOps.

---------------------------------------------------------

Custom Dynamic Inventory Script to dynamically discover live hosts by pinging IPs or reading from a dynamic source.

âœ… Goal: Dynamic Live Inventory Example
    We'll build a Python script that:
      1. Pings a list of IPs.
      2. Includes only reachable (alive) hosts in the inventory.
      3. Outputs valid JSON for Ansible.

âœ… Step-by-Step: Live Discovery Example

ðŸ”¹ 1. Python Script: live_inventory.py

#!/usr/bin/env python3
import json
import subprocess
import sys

# List of IPs to check (can come from API, DB, etc.)
ip_list = ["192.168.56.10", "192.168.56.11", "192.168.56.20"]

# Function to ping IP and check if it's alive
def is_host_alive(ip):
    try:
        # Ping with 1 packet, suppress output
        subprocess.check_output(["ping", "-c", "1", "-W", "1", ip], stderr=subprocess.DEVNULL)
        return True
    except subprocess.CalledProcessError:
        return False

# Build dynamic inventory
inventory = {
    "all": {
        "hosts": [],
        "vars": {
            "ansible_user": "ubuntu"
        }
    },
    "_meta": {
        "hostvars": {}
    }
}

# Ping each IP, add alive hosts to inventory
for ip in ip_list:
    if is_host_alive(ip):
        inventory["all"]["hosts"].append(ip)
        inventory["_meta"]["hostvars"][ip] = {
            "env": "dev"  # Example variable, could be dynamic
        }

# Output for Ansible
if len(sys.argv) == 2 and sys.argv[1] == '--list':
    print(json.dumps(inventory, indent=2))
else:
    print(json.dumps({}))

ðŸ”¹ 2. Make Script Executable
chmod +x live_inventory.py

ðŸ”¹ 3. Test the Script
./live_inventory.py --list

âœ… Expected Output (Example with reachable hosts)

{
  "all": {
    "hosts": [
      "192.168.56.10",
      "192.168.56.11"
    ],
    "vars": {
      "ansible_user": "ubuntu"
    }
  },
  "_meta": {
    "hostvars": {
      "192.168.56.10": {
        "env": "dev"
      },
      "192.168.56.11": {
        "env": "dev"
      }
    }
  }
}
Unreachable hosts (e.g., 192.168.56.20) won't be listed.

ðŸ”¹ 4. Use with Ansible Inventory
ansible-inventory -i ./live_inventory.py --graph

âœ… Summary
    1. Dynamically checks which hosts are up.
    2. Builds live inventory for Ansible.
    3. Can extend to use APIs, Cloud discovery, etc.
    4. Fully compatible with Ansible Dynamic Inventory.

---------------------------------------------------------------------

